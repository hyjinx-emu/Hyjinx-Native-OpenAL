name: publish

on:
  push:
  release:
    types: [ published ]

permissions:
  contents: write
  pull-requests: write

env:
  OPENAL_VERSION: 1.21.1 # This needs to be updated to match the OpenAL version being compiled.

jobs:
  prepare:
    runs-on: windows-latest

    outputs:
      version_number: ${{ steps.set_version_number.outputs.version_number }}
      version_suffix: ${{ steps.set_version_suffix.outputs.version_suffix }}
      full_version: ${{ steps.set_version_number.outputs.version_number }}${{ steps.set_version_suffix.outputs.version_suffix != '' && '-' || '' }}${{ steps.set_version_suffix.outputs.version_suffix }}

    steps:
      - name: Set version number
        id: set_version_number
        shell: bash
        run: echo "version_number=${{ env.OPENAL_VERSION }}" >> $GITHUB_OUTPUT

      - name: Set version suffix
        if: github.event.action != 'published'
        id: set_version_suffix
        shell: bash
        run: echo "version_suffix=preview.${{ github.run_number }}" >> $GITHUB_OUTPUT

  build-native:
    name: build (${{ matrix.platform.name }})
    runs-on: ${{ matrix.platform.os }}
    needs: prepare

    env:
      BUILD_DIR: temp

    strategy:
      matrix:
        platform:
          - { name: win-x64, os: ubuntu-latest, toolchain: x86_64-w64-mingw32 }
      fail-fast: false
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: kcat/openal-soft
          ref: ${{ env.OPENAL_VERSION }}

      - name: Install dependencies (Windows)
        if: matrix.platform.name == 'win-x64'
        run: |
          sudo apt update
          sudo apt install -y cmake make ninja-build g++-mingw-w64-x86-64-posix
          sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
          sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix

      - name: Create temp folder
        shell: bash
        run: mkdir ${{ env.BUILD_DIR }}

      - name: Configure OpenAL (Windows)
        if: matrix.platform.name == 'win-x64'
        shell: bash
        run: cmake -S . -B "${{ env.BUILD_DIR }}/" \
          -DCMAKE_SYSTEM_NAME=Windows \
          -DCMAKE_C_COMPILER=${{ matrix.platform.toolchain }}-gcc \
          -DCMAKE_CXX_COMPILER=${{ matrix.platform.toolchain }}-g++ \
          -DCMAKE_RC_COMPILER=${{ matrix.platform.toolchain }}-windres \
          -DCMAKE_CXX_STANDARD=17 \
          -DCMAKE_INSTALL_PREFIX="$GITHUB_WORKSPACE/out" \
          -DLIBTYPE=SHARED \
          -DALSOFT_NO_CONFIG_UTIL=ON \
          -DALSOFT_EXAMPLES=OFF \
          -DALSOFT_TESTS=OFF \
          -DBUILD_TESTING=OFF

      - name: Build and Install
        shell: bash
        run: cmake --build "${{ env.BUILD_DIR }}/" --target install --parallel

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "native-${{ matrix.platform.name }}"
          path: "${{ env.BUILD_DIR }}/"
  
  package:
    runs-on: windows-latest
    needs: [ prepare, build-native ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up NuGet
        uses: nuget/setup-nuget@v2
        with:
          nuget-api-key: ${{ secrets.NUGET_TOKEN }}
          nuget-version: latest

      - name: Package preview
        if: github.event.action != 'published'
        shell: powershell
        run: nuget pack Hyjinx.OpenAL.native.nuspec -OutputDirectory ./out -Version "${{ needs.prepare.outputs.version_number }}" -Suffix "${{ needs.prepare.outputs.version_suffix }}"

      - name: Package release
        if: github.event.action == 'published'
        shell: powershell
        run: nuget pack Hyjinx.OpenAL.native.nuspec -OutputDirectory ./out -Version "${{ needs.prepare.outputs.version_number }}"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nupkg
          path: ./out/*.nupkg

  publish:
    runs-on: windows-latest
    needs: package

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: nupkg
          path: dist/

      - name: Set up NuGet
        uses: nuget/setup-nuget@v2
        with:
          nuget-api-key: ${{ secrets.NUGET_TOKEN }}
          nuget-version: latest

      - name: Push package(s)
        shell: powershell
        run: |
          Get-ChildItem -Path "dist" -Filter *.nupkg | ForEach-Object {
            Write-Host "Pushing $($_.FullName)"
            nuget push $_.FullName -Source https://api.nuget.org/v3/index.json
          }

  post-publish:
    runs-on: ubuntu-latest
    needs: [ prepare, publish ]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: nupkg
          path: dist/
          
      - name: Publish
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.prepare.outputs.full_version }}
          artifacts: "dist/*.*"
          prerelease: ${{ github.event.action != 'published' }}
          generateReleaseNotes: ${{ github.event.action != 'published' }}
          allowUpdates: true
          omitBodyDuringUpdate: true
